https://decisivedevops.com/understanding-kubernetes-emptydir-with-3-practical-use-cases-960f550e0e34/

## üì¶ What is `emptyDir` in Kubernetes?

- **Definition**: A type of ephemeral volume created when a Pod is assigned to a Node.
- **Lifecycle**: Exists only for the lifespan of the Pod. Deleted when the Pod is removed.
- **Purpose**: Ideal for temporary data storage and sharing between containers in the same Pod.

---

## üîë Key Characteristics

- **Creation**: Automatically created when a Pod is scheduled.
- **Persistence**: Survives container crashes but not Pod deletion.
- **Shared Access**: All containers in a Pod can access the same `emptyDir`.
- **Mount Flexibility**: Containers can mount it at different paths.
- **Storage Medium**:
  - Default: Node‚Äôs disk or SSD.
  - Optional: RAM-backed (`emptyDir.medium: "Memory"`) for faster access.
- **Location on Node**: `/var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/`

---

## ‚öôÔ∏è Lifecycle Operations

### Node-Level
- Pod assignment triggers `emptyDir` creation.
- Storage medium depends on configuration (disk or memory).

### Pod-Level
- Volume is ready as soon as the Pod starts.
- Data remains intact across container restarts.
- Deleted permanently when the Pod is removed.

---

## üõ†Ô∏è 3 Practical Use Cases

### 1. **Log Aggregation and Processing**
- Containers write logs to `emptyDir`.
- A sidecar container reads and processes logs.
- Useful for temporary log storage before external export.

### 2. **In-Memory Data Processing**
- Use `emptyDir.medium: "Memory"` for high-speed operations.
- Ideal for caching, buffering, or intermediate computations.

### 3. **Batch Job Processing**
- Temporary storage for input/output files during job execution.
- Data discarded after job completion, reducing storage overhead.

---

## üß† Summary

`emptyDir` is a simple yet powerful tool for managing ephemeral data within Kubernetes Pods. 
It‚Äôs perfect for scenarios where data doesn‚Äôt need to persist beyond the Pod‚Äôs lifecycle and offers flexibility in both disk and memory-backed configurations.




Here‚Äôs the corrected manifest file first:  

```yaml
apiVersion: v1
kind: Pod
metadata:               # Defines metadata about the Pod
  name: example-pod     # Pod name
spec:                   # Specification (the desired state) of the Pod
  containers:           # List of containers the Pod will run
  - name: app-container # Name of the container
    image: busybox      # Container image to use
    command: ["sleep", "3600"]  # Command to run inside the container
    volumeMounts:       # Where to mount the volume in the container
    - mountPath: /data  # Path inside the container
      name: temp-storage  # References the volume defined below
  volumes:              # Defines the volumes attached to this Pod
  - name: temp-storage  # Volume name (must match volumeMount)
    emptyDir: {}        # Type of volume (ephemeral, lives only as long as the Pod)
```

***

### **Explanation of Each Field**

#### 1. **`apiVersion: v1`**
- Specifies which Kubernetes API version this manifest uses.
- `v1` is the stable API group for core Kubernetes resources like Pods, Services, ConfigMaps, etc.

#### 2. **`kind: Pod`**
- Tells Kubernetes that the object being defined is a **Pod**.
- A Pod is the smallest deployable unit in Kubernetes, and it can contain **one or more containers**.

#### 3. **`metadata`**
- Stores identifying data for this resource.
- **`name: example-pod`** means this Pod will be called `example-pod` in the cluster.
- Metadata can also include labels, annotations, and namespace info.

#### 4. **`spec`**
- Describes the desired configuration of the Pod.

***

### Inside `spec`

#### **`containers`**
- This is a list because a Pod can have multiple containers.
- **`name: app-container`** ‚Üí The logical name for this container inside the Pod.
- **`image: busybox`** ‚Üí Tells Kubernetes to pull the `busybox` container image from a registry.
- **`command: ["sleep", "3600"]`** ‚Üí Overrides the container‚Äôs default command to keep it running for 3600 seconds.

#### **`volumeMounts`**
- **`mountPath: /data`** ‚Üí Inside the container, the volume will be accessible at `/data`.
- **`name: temp-storage`** ‚Üí Must match one of the volumes defined under `spec.volumes`.

***

#### **`volumes`**
- **`name: temp-storage`** ‚Üí The internal name for the volume.
- **`emptyDir: {}`** ‚Üí Creates an **ephemeral** volume on the **node‚Äôs local storage**:
  - It is empty when the Pod starts.
  - It exists as long as the Pod exists.
  - When the Pod is deleted or moved to another node, the data is lost.

Use cases for `emptyDir`:  
- Temporary scratch space.
- Sharing files between multiple containers in the same Pod.
- Caching intermediate build/process results.

***

### **Pod Lifecycle with This Manifest**
1. **Pod created** ‚Üí Kubernetes schedules it to a node.
2. **`emptyDir` volume created** ‚Üí Empty directory on that node‚Äôs storage created for `temp-storage`.
3. **Container starts** and mounts the `emptyDir` volume at `/data`.
4. Containers can read/write files to `/data`.
5. **Pod deleted** ‚Üí The emptyDir storage is also deleted automatically.

***

‚úÖ **In summary:**  
This manifest defines a single-container Pod running the `busybox` container image, with an ephemeral `emptyDir` volume mounted at `/data` inside the container. The volume is temporary and only exists while the Pod itself exists.

***

When you use an **emptyDir volume** and your Pod is running on **node2**, the data you write to `/data` inside the container is stored on the filesystem of node2 in a 
specific directory managed by Kubernetes‚Äînot just inside the container, but on the node itself[1][2][5].

- The files you see at `/data` in your container are actually stored in a directory on node2 at:  
  `/var/lib/kubelet/pods/{pod_uid}/volumes/kubernetes.io~empty-dir/{volume_name}/`[1][2][5]

kubectl get pod example-pod -n default -o jsonpath='{.metadata.uid}'


- This directory is created when the Pod is scheduled to node2, and all files written via `/data` inside your container exist as real files in this host path for as long as the Pod lives on node2 (container restarts don‚Äôt clear them)[7].
- You cannot access this data from outside the Pod directly (unless you log into node2 itself and visit the path above), but it means the storage and the data reside physically on node2‚Äôs disk or RAM, depending on configuration[3][7].

Key behaviors:
- If the Pod is deleted or evicted, the directory and all data inside it on node2 are removed permanently[3][5][6].
- If your Pod was rescheduled to another node (node1, for example), a new emptyDir is created there, and the files do not move‚Äîthey are only stored on the node where the Pod currently runs[5][7].

So, as long as your Pod is running on node2, the /data contents exist on node2‚Äôs local disk under the kubelet‚Äôs management directory[1][2].

Sources:
- Kubernetes documentation on volumes and emptyDir[3][5][7]
- Learning Ocean detailed path info[1]
- NetApp volume types and behavior[6]

Sources
[1] Kubernetes - Volumes - Learning-Ocean https://learning-ocean.com/tutorials/kubernetes/kubernetes-volumes/
[2] How to Collect Log Data from Kubernetes Using emptyDir https://edgedelta.com/company/blog/how-to-collect-kubernetes-log-data-emptydir
[3] Volumes https://kubernetes.io/docs/concepts/storage/volumes/
[4] Does Kubernetes mount an emptyDir volume on the host? https://stackoverflow.com/questions/46525081/does-kubernetes-mount-an-emptydir-volume-on-the-host
[5] Understanding Kubernetes emptyDir ‚Äî With 3 Practical Use ... https://decisivedevops.com/understanding-kubernetes-emptydir-with-3-practical-use-cases-960f550e0e34/
[6] 5 Types of Kubernetes Volumes and How to Work with Them https://www.netapp.com/learn/cvo-blg-5-types-of-kubernetes-volumes-and-how-to-work-with-them/
[7] Ephemeral Volumes https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/
[8] Configure a Pod to Use a Volume for Storage https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/

==

**emptyDir volume in memory**,
=============================

To store an **emptyDir volume in memory**, set `emptyDir.medium: "Memory"` in your Pod manifest; Kubernetes will mount a RAM-backed filesystem (tmpfs) as the volume, meaning all data is kept in node RAM[2][7][6].

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: memory-emptydir-pod
spec:
  containers:
  - name: app-container
    image: busybox
    command: ["sleep", "3600"]
    volumeMounts:
    - mountPath: /data
      name: ram-storage
  volumes:
  - name: ram-storage
    emptyDir:
      medium: Memory      # Uses RAM for data storage
      sizeLimit: 512Mi    # Optional: maximum size of the tmpfs volume
```

**Pod Life Cycle with memory-backed emptyDir:**
- When the Pod is scheduled, Kubernetes creates the tmpfs volume in RAM on the node[2][4].
- Data written to `/data` in the container is stored in node memory.  
- If the container restarts (due to a crash), files in memory remain available[2][4].
- If the Pod is deleted, evicted, or moved to another node, or if the node reboots, the RAM storage (tmpfs) is wiped and **all data is lost**[2][4][7]. This also includes loss from node restarts, not just Pod deletion.

**Key scenarios to be aware of:**
- Pod deletion or termination: data in tmpfs is erased[2][4].
- Node failure or reboot: RAM storage is cleared, so all volume data is lost[2][7].
- Suitable only for temporary workspace, caches, or fast data exchange within Pod lifetime‚Äînot for persistent storage.

Sources:
- Kubernetes official documentation[2]
- NetApp volume guide[7]
- Portworx ephemeral storage overview[6]
- DecisiveDevOps use-case breakdown[4]

Sources
[1] Memory EmptyDir tmpfs size capped at 100% of node RAM ... - GitHub https://github.com/kubernetes/kubernetes/issues/126617
[2] Volumes | Kubernetes https://kubernetes.io/docs/concepts/storage/volumes/
[3] emptyDir mounts to tmpfs by default ¬∑ Issue #3609 - GitHub https://github.com/bottlerocket-os/bottlerocket/issues/3609
[4] Understanding Kubernetes emptyDir ‚Äî With 3 Practical Use-cases https://decisivedevops.com/understanding-kubernetes-emptydir-with-3-practical-use-cases-960f550e0e34/
[5] Resource Management for Pods and Containers - Kubernetes https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
[6] Ephemeral Storage in Kubernetes: Overview & Guide - Portworx https://portworx.com/knowledge-hub/ephemeral-storage-in-kubernetes-overview-guide/
[7] 5 Types of Kubernetes Volumes and How to Work with Them | NetApp https://www.netapp.com/learn/cvo-blg-5-types-of-kubernetes-volumes-and-how-to-work-with-them/
[8] How to take tmpfs usage into account in Kubernetes resource ... https://stackoverflow.com/questions/71405477/how-to-take-tmpfs-usage-into-account-in-kubernetes-resource-allocation
